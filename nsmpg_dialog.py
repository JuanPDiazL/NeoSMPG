# -*- coding: utf-8 -*-
"""
/***************************************************************************
 NSMPGDialog
                                 A QGIS plugin
 New implementation of SMPG
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-09-23
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Juan Pablo Diaz Lombana
        email                : email.not@defined.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

# from qgis.PyQt import uic, QtWidgets
from PyQt5 import uic
from PyQt5.QtWidgets import QDialog, QFileDialog, QPushButton, QMessageBox

from .nsmpgCore.parsers.CSVParser import parse_csv
from .nsmpgCore.structures import Dataset
from .nsmpgCore.exporters.WebExporter import export_to_web_files

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'nsmpg_dialog_base.ui'))


class NSMPGDialog(QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(NSMPGDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        ### My code starting from here
        self.loadFileButton: QPushButton
        self.processButton: QPushButton

        self.loadFileButton.clicked.connect(self.load_file_btn_event)
        self.processButton.clicked.connect(self.process_btn_event)

    def load_file_btn_event(self):
        self.selected_source = QFileDialog.getOpenFileName(self, 'Open dataset file', None, "CSV files (*.csv)")[0]
        if self.selected_source == "": return
        self.dataset_source_path = os.path.normpath(os.path.dirname(self.selected_source))
        self.dataset_filename = ''.join(os.path.basename(self.selected_source).split('.')[:-1])

        parsed_dataset, col_names = parse_csv(self.selected_source)
        self.structured_dataset = Dataset(self.dataset_filename, parsed_dataset, col_names)

    def process_btn_event(self):
        destination_path = os.path.join(self.dataset_source_path, self.dataset_filename)
        export_to_web_files(destination_path, self.structured_dataset)
        QMessageBox(text='Task completed.').exec()